# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches:
      - "main"
      - "Interfaces_fonctions"
      
  pull_request:
    branches:
      - "main"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

    - name: Debug PYTHONPATH
      run: echo $PYTHONPATH

    - name: Test with pytest
      run: |
        pytest
  
  validate-containers:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build and start containers
      run: |
        echo "MONGO_INITDB_ROOT_USERNAME=admin" >> .env
        echo "MONGO_INITDB_ROOT_PASSWORD=adminpassword" >> .env
        echo "MONGO_INITDB_DATABASE=my_database" >> .env
        echo "MONGO_HOST=mongodb" >> .env
        echo "MONGO_PORT=27017" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=postgrespassword" >> .env
        echo "POSTGRES_DB=my_database" >> .env
        docker-compose -f Docker-compose.yml up -d

    - name: Verify other containers are running
      run: |
        RUNNING_CONTAINERS=$(docker ps -q | wc -l)
        if [ "$RUNNING_CONTAINERS" -eq 0 ]; then
          echo "All containers stopped, which is not expected." && exit 1
        else
          echo "Other containers are still running."
        fi

    - name: Clean up
      if: always()
      run: |
        docker-compose -f Docker-compose.yml down

